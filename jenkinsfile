pipeline{
	agent any

        stages{
            stage("Compile"){
                steps{
                    withMaven(maven : 'Maven'){
                        sh 'mvn clean compile'
                    }
                }
            }

            stage("Unit Testing"){
                steps{
                    withMaven(maven : 'Maven'){
                        sh 'mvn test jacoco:report'
                    }
                }
                post{
                    success{
                       publishHTML(target: [
                           allowMissing:false,
                           alwaysLinkToLastBuild: false,
                           keepAll: true,
                           reportDir: 'target/site/jacoco',
                           reportFiles: 'index.html',
                           reportName: 'Jacoco Report'
                        ])
                    }
                }
            }

            stage("Postman Testing"){
                parallel{
                    stage("Run API"){
                        steps{
                            sh 'mvn spring-boot:run &'
                        }
                    }
                    stage('Postman Test'){
                        steps{
                            dir('src/test/postman'){
                                sleep time: 10, unit: 'SECONDS'
                                //sh "newman run 'TrackMAPI Variables Unsecure.postman_collection.json' -r html --reporter-html-export 'HTMLReport/report.html' "
                                sh "newman run 'TrackMAPI Variables Secure.postman_collection.json' -r htmlextra --reporter-htmlextra-export 'HTMLReport/report.html' "
                            }
                        }
                        post{
                            success{
                                publishHTML( target: [
                                    allowMissing:false,
                                    alwaysLinkToLastBuild: false,
                                    keepAll: true,
                                    reportDir: 'src/test/postman/HTMLReport',
                                    reportFiles: 'report.html',
                                    reportName: 'Postman Report'
                                ])
                            }
                        }
                    }
                }
            }

            stage("JMeter Testing"){
                parallel{
                    stage("Run API"){
                        steps{
                            sleep time: 10, unit: 'SECONDS'
                            sh 'mvn spring-boot:run &'
                        }
                    }
                    stage("Jmeter Testing"){
                        steps{
                            dir('src/test/jmeter'){
                                     sleep time: 10, unit: 'SECONDS'
                                     sh 'jmeter -n -f -t trackmapi-testplan-noActuator-1kthreads-secure.jmx -l results.jtl -e -o HTMLReport'
                            }
                        }
                        post{
                            success{
                                publishHTML( target: [
                                    allowMissing:false,
                                    alwaysLinkToLastBuild: false,
                                    keepAll: true,
                                    reportDir: 'src/test/jmeter/HTMLReport',
                                    reportFiles: 'index.html',
                                    reportName: 'JMeter Report'
                                ])
                            }
                        }
                    }
                }
            }
        }
    /*
        stages{
            stage("Build jar file"){
                steps{
                    withMaven(maven: 'Maven'){
                        sh 'mvn clean package'
                    }
                }
            }

            stage("Build app docker image"){
                steps{
                    sh 'docker build -t trackmapi:1.0 .'
                }
            }

            stage("Run springboot and mongodb containers"){
                steps{
                    dir('src/main/resources/'){
                        sh 'docker-compose up'
                    }
                }
            }
        }
    */
}
